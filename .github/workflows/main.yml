# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push the image to Amazon ECR
        id: build-image
        

        run: |
          # Build a docker container and push it to ECR 
          echo "ECR Login"
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/z2g8g3c5
          docker build -t public.ecr.aws/z2g8g3c5/sboot:latest .
          echo "Pushing image to ECR..."
          docker push public.ecr.aws/z2g8g3c5/sboot:latest
          echo "all done"
          
          
  Deployment_In_Cluster:
    name: Deployment 
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: AWS Login For EKS
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}   
        aws-region: us-east-2
    
    - name: Deploy into EKS  
      id: deploy-image
      run: |
        aws eks --region us-east-2 update-kubeconfig --name timepass
        helm upgrade --recreate-pods -i sb sbapp
        export SERVICE_IP=$(kubectl get svc --namespace default sb --template "{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}")
        echo http://$SERVICE_IP:9191
